var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = PhaseRetrieval\nDocTestSetup = quote\n    using PhaseRetrieval\nend","category":"page"},{"location":"#PhaseRetrieval.jl-Documentation","page":"Home","title":"PhaseRetrieval.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#About-the-package","page":"Home","title":"About the package","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is devoted to the forward and inverse problems of Phase Retrieval (PR).","category":"page"},{"location":"#Basic-usage","page":"Home","title":"Basic usage","text":"","category":"section"},{"location":"#Forward-model","page":"Home","title":"Forward model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Let's set up a simulation environment matching the following hardware set up: a beam with a footprint of 10 mm diameter is focused with a lens of 300 mm focal length and the PSF is registered with UI-1540 camera.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using PhaseRetrieval\nlens = PhaseRetrieval.ImagingLens(300mm, 25mm)","category":"page"},{"location":"#Types-and-Functions","page":"Home","title":"Types and Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [PhaseRetrieval]","category":"page"},{"location":"#PhaseRetrieval.AbstractPRproblem","page":"Home","title":"PhaseRetrieval.AbstractPRproblem","text":"Big class of general phase-retrieval-related problems.\n\n\n\n\n\n","category":"type"},{"location":"#PhaseRetrieval.CameraChip","page":"Home","title":"PhaseRetrieval.CameraChip","text":"CameraChip(pixelsize = p, imagesize = (sizex, sizey), bitdepth = 8, channelbitdepth = 8 repesent a camera chip with a given pixel size, imagesize, and bitdepth. If omitted,  bitdepth is set to 8.\n\n\n\n\n\n","category":"type"},{"location":"#PhaseRetrieval.GS","page":"Home","title":"PhaseRetrieval.GS","text":"Gerchberg-Saxton, classical method to solve PR problem\n\n\n\n\n\n","category":"type"},{"location":"#PhaseRetrieval.GSparam","page":"Home","title":"PhaseRetrieval.GSparam","text":"GSparam(; ϕ⁰, maxit, maxϵ, keephistory, snapshots)\n\nParameters for a concrete realisation of GS method.\n\n\n\n\n\n","category":"type"},{"location":"#PhaseRetrieval.ImagingLens","page":"Home","title":"PhaseRetrieval.ImagingLens","text":"Fixed focal length lens\n\n\n\n\n\n","category":"type"},{"location":"#PhaseRetrieval.ImagingSensor","page":"Home","title":"PhaseRetrieval.ImagingSensor","text":"Imaging sensor or camera consists of a lens and camera chip.\n\n\n\n\n\n","category":"type"},{"location":"#PhaseRetrieval.Linear","page":"Home","title":"PhaseRetrieval.Linear","text":"Build SH diversity using the linear functions\n\n\n\n\n\n","category":"type"},{"location":"#PhaseRetrieval.MLA","page":"Home","title":"PhaseRetrieval.MLA","text":"Micro-lens array structure. \n\nThe main reason to introduce it separable is to handle the case when camera chip is located not exactly\nin the MLA focal plane.\n\n\n\n\n\n","category":"type"},{"location":"#PhaseRetrieval.PDplan","page":"Home","title":"PhaseRetrieval.PDplan","text":"PDplan(plan, diversity)\n\nConstruct Pupil Diversity plan, which, if multiplied by the array a of proper dimensions, computes fft( diversity *a)\n\n\n\n\n\n","category":"type"},{"location":"#PhaseRetrieval.PRproblem","page":"Home","title":"PhaseRetrieval.PRproblem","text":"PRproblem(a, A)\n\nClassical phase-retrieval problem of finding complex arrays x, X such that    |x| = a, |X| = A, and X =F(x),  where F denotes the Fourier transform.\n\n\n\n\n\n","category":"type"},{"location":"#PhaseRetrieval.Quadratic","page":"Home","title":"PhaseRetrieval.Quadratic","text":"Build SH diversity using the quadratic functions\n\n\n\n\n\n","category":"type"},{"location":"#PhaseRetrieval.SHSensor","page":"Home","title":"PhaseRetrieval.SHSensor","text":"Shack-Hartmann sensor composed from MLA and a camera. \n\nMLA plane position is defined by distance,  β,  and γ. \nMLA subapertures position is defined by mlaorigin and α.\n\n\n\n\n\n","category":"type"},{"location":"#PhaseRetrieval.hwConfig-Tuple{String, Any, Any, Any}","page":"Home","title":"PhaseRetrieval.hwConfig","text":"hwConfig(s::String, f, λ, d) creates a hardware configuration with\n`s` camera, lens with a focal length `f` and aperture `d` and using wavelenght\n`λ`.\n\nExample\n\nconf1 = hwConfig(\"UI1540\", 300mm, 633nm,25mm) creates a configuration\nbased on UI-1540 camera, with a 1 inch lens with focal length 300mm and He-Ne laser.\n\n\n\n\n\n","category":"method"},{"location":"#AlternatingProjections.AbstractProblems.solve-Tuple{PRproblem, GSparam, Vararg{Any, 5}}","page":"Home","title":"AlternatingProjections.AbstractProblems.solve","text":"solve(pr::PRproblem, alg::GS, args...)\n\nSolve PR problem using GS method. Any change of the GS parameters can be given \n\n\n\n\n\n","category":"method"},{"location":"#PhaseRetrieval.SHdiversity","page":"Home","title":"PhaseRetrieval.SHdiversity","text":"SHdiversity(size, cellsize, celloffset=0, α=0)\n\nGenerate SH diversity phase of given overall size, cellsize, central cell offset and rotation angle α. \n\n\n\n\n\n","category":"function"},{"location":"#PhaseRetrieval.SHdiversity-Tuple{AbstractRange, AbstractRange, Any, Any, Any}","page":"Home","title":"PhaseRetrieval.SHdiversity","text":"SHdiversity(xrange, yrange, e₁, e₂, o)\n\nGenerate SH diversity phase on array xrange × yrange with cell based on orthogonal grid formed by vectors  e₁, e₂, and origin at o. \n\n\n\n\n\n","category":"method"},{"location":"#PhaseRetrieval.appsftoPR-Tuple{Any, Any}","page":"Home","title":"PhaseRetrieval.appsftoPR","text":"appsftoPR(ap,psfimage) constructs a phase retrieval problem from two real arrays, representing the pupil and the focal planes intensity distributions. \n\nThe aperture and PSF are assumed to be centred in the array.\n\nExamples\n\n\nap,_ = PhaseRetrieval.aperture(-1:.2:1,-1:.2:1,.8);\npsfimage = psf(ap);\n\npr = appsftoPR(ap,psfimage)\n\n# output\nPRproblem{Float64, 2}([1.0 0.0 … 1.0 1.0; 0.0 0.0 … 0.0 1.0; … ; 1.0 0.0 … 1.0 1.0; 1.0 1.0 … 1.0 1.0], [13.0 10.878351222990862 … 6.182768610120748 10.878351222990862; 10.878351222990862 8.857504209336044 … 4.43232303889513 8.857504209336044; … ; 6.182768610120748 4.43232303889513 … 0.7324956483358354 4.43232303889513; 10.878351222990862 8.857504209336044 … 4.43232303889513 8.857504209336044])\n\n\n\n\n\n\n","category":"method"},{"location":"#PhaseRetrieval.binning-Tuple{Any, Integer}","page":"Home","title":"PhaseRetrieval.binning","text":"binning(arr, Q)\n\nDownsample  array by replacing quadratic cells of size Q × Q by summ of its elements\n\n\n\n\n\n","category":"method"},{"location":"#PhaseRetrieval.centre-NTuple{5, Any}","page":"Home","title":"PhaseRetrieval.centre","text":"Give centre of an orthogonal grid cell of the grid with cellsize, \ncentre at grid origin and rotated at angle α counterclockwise.\n\n\n\n\n\n","category":"method"},{"location":"#PhaseRetrieval.constructSHPhaseDiversity-Tuple{PhaseRetrieval.SHSensor, Any, Any}","page":"Home","title":"PhaseRetrieval.constructSHPhaseDiversity","text":"constructSHPhaseDiversity(wfs::SHSensor, d, λ )\n\nConstruct SH phase diversity of minimal size for wfs within aperture of diameter d and wavelength λ. Return tuple of arrays for the aperture and phase.\n\n\n\n\n\n","category":"method"},{"location":"#PhaseRetrieval.diskmatrix","page":"Home","title":"PhaseRetrieval.diskmatrix","text":"Create array of zeroes with disk of ones of the relative diameter r\n\n\n\n\n\n","category":"function"},{"location":"#PhaseRetrieval.lineararray","page":"Home","title":"PhaseRetrieval.lineararray","text":"lineararray(xrange, yrange, kx, ky, k0=0)\n\nEvaluate values of linear function kxx + kyy + k0  on array  xrange  yrange.\n\nlineararray(size, kx, ky, k0=0)\n\nUse 1:size as xrange and yrange.\n\nlineararray(xrange, yrange, a::Vector, k0=0)\n\nUse first and second components of vector a as kx and ky.\n\n\n\n\n\n","category":"function"},{"location":"#PhaseRetrieval.logrescale","page":"Home","title":"PhaseRetrieval.logrescale","text":"logrescale(array, α = 5)\n\nRescale in log-scale: maximum will correspond to 1, 10^-α will correspond to 0.\n\n\n\n\n\n","category":"function"},{"location":"#PhaseRetrieval.orthIndexes","page":"Home","title":"PhaseRetrieval.orthIndexes","text":"Generate array of indexes of an orthogonal geometry\n\n\n\n\n\n","category":"function"},{"location":"#PhaseRetrieval.phwrap-Tuple{AbstractFloat}","page":"Home","title":"PhaseRetrieval.phwrap","text":"Wrap Phase\n\n\n\n\n\n","category":"method"},{"location":"#PhaseRetrieval.psf-Tuple{AbstractArray}","page":"Home","title":"PhaseRetrieval.psf","text":"psf(amplitude, phase) -> psfimage psf(pupilfield) -> psfimage\n\nCalculate psf for given amplitude and phase.\n\nExamples\n\n\nap,_ = PhaseRetrieval.aperture(-1:.2:1,-1:.2:1,.8);\n\npsfimage = psf(ap)\n\npsfimage[1]\n\n# output\n\n17.720305330423212\n\n\n\n\n\n\n","category":"method"},{"location":"#PhaseRetrieval.quadratic-Tuple{Tuple}","page":"Home","title":"PhaseRetrieval.quadratic","text":"Generate quadratic array\n\n\n\n\n\n","category":"method"},{"location":"#PhaseRetrieval.rescale-Tuple{Any}","page":"Home","title":"PhaseRetrieval.rescale","text":"rescale(array)\n\nRescale array between 0 and 1\n\n\n\n\n\n","category":"method"},{"location":"#PhaseRetrieval.rescale_minmax-Tuple{Any}","page":"Home","title":"PhaseRetrieval.rescale_minmax","text":"rescale_minmax(array)\n\nRescale array between 0 and 1 and return the rescaled array and the min, max values\n\n\n\n\n\n","category":"method"},{"location":"#PhaseRetrieval.slopearray","page":"Home","title":"PhaseRetrieval.slopearray","text":"slopearray(dom::CartesianDomain2D, dx, dy, k0=0) generates linear array defined on the domain such that\nthe total growth in x and y direction is dx and dy.\n\n\n\n\n\n","category":"function"},{"location":"#PhaseRetrieval.subdivide-Tuple{Any, Any}","page":"Home","title":"PhaseRetrieval.subdivide","text":"subdivide(arr, Q)\n\nSubdivide array of dimension MQ x NQ in Q^2 stacked tiles of size M x N.\n\n\n\n\n\n","category":"method"},{"location":"#PhaseRetrieval.subdivide_sum-Tuple{Any, Any}","page":"Home","title":"PhaseRetrieval.subdivide_sum","text":"subdivide_sum(arr,Q)\n\nDivide array in quadratic cells of size Q × Q  and sum the elements with the same indexes in each cell.\n\n\n\n\n\n","category":"method"},{"location":"#PhaseRetrieval.tile-Tuple{Any, Integer}","page":"Home","title":"PhaseRetrieval.tile","text":"tile(arr, Q)\n\nDivide array in quadratic cells of size Q × Q and stack them along the third dimension.\n\n\n\n\n\n","category":"method"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
